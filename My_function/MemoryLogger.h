#ifndef __INCLUDE_GUARD__MemoryLogger
	//既に構造体が定義されている場合は、俗称インクルードガードによって、再定義を回避する。
	#define __INCLUDE_GUARD__MemoryLogger	//[__INCLUDE_GUARD__]を定義し、次回以降読み込まないようにする。

#include <sys/types.h>	//getpid();関数に必要。
#include <unistd.h>		//getpid();関数に必要。

#include "../MyOAuthFunc/str_sprintf.h"

#include <string>		//std::string
#include <time.h>		//time()



//=========================================================================================================================================================================================================================
// [ class MemoryLogger ] :: begin :: プロセス全体のメモリ使用量をテキストファイルに書き出す。デバッグ用の関数。
//=========================================================================================================================================================================================================================
//=========================================================================================================================================================================================================================

#define MemoryLogged() MemoryLogged_entity(__FILE__, __FUNCTION__, __LINE__ )	//このマクロを埋め込むことで、ファイル名、関数名、行数、を記録できるようになる。

class MemoryLogger{
	private:
		std::string FileName;//保存するファイル名を格納しておく。

		int MemoryLogger_Init();

	public:
				
		//コンストラクタやディストラクタは、戻り値が無く、void型ですら無いため、returnが使えない。余りにも使いにくいので、今回は、初期化関数と終了関数を用意する事とした。
		//コンストラクタ
		MemoryLogger();
		//ディストラクタ
		~MemoryLogger();
		
		//メンバ関数
		int MemoryLogged_entity(const char *file, const char *function, int line );
};

//=========================================================================================================================================================================================================================
//=========================================================================================================================================================================================================================
// [ class MemoryLogger ] :: end ::
//=========================================================================================================================================================================================================================



//使い方

/*
	class MemoryLogger* ML = new MemoryLogger();	//コンストラクタの呼び出し。
	ML->MemoryLogged();
	delete ML;
*/



#endif//__INCLUDE_GUARD__MemoryLogger

